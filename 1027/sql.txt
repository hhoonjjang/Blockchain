USE testing1;
testing1 DB를 사용한다. << /접속한다. << /기준으로 설정한다.



CREATE SCHEMA `testing1` DEFAULT CHARACTER SET utf8mb4 ;

CREATE TABLE `testing`.`new_table`(
    `idx` INT NOT NULL,
    `new_tablecol` VARCHAR(45) NULL,
    PRIMARY KEY (`idx`));

CREATE : 생성하는 명령어
- DB, TABLE

DEFAULT CHARACTER SET utf8mb4
- utf8mb4 방식으로 인코딩한다. <<저장할 때의 방식이다.
- txt 파일 만들 때 선택하는 인코딩과 같다.

`testing`.`new_table`
- `DB명`.`생성할 테이블명`

SELECT * FROM testing.new_table;

(
    `idx` INT NOT NULL,
    `new_tablecol` VARCHAR(45) NULL,
    PRIMARY KEY (`idx`));
- (`컬럼명` 자료형 옵션 , `컬럼명` 자료형 옵션, 옵션)
- idx 컬럼명을 INT 자료형을 사용하여 생성하되 idx는 빈값이면 안된다.
new_tablecol 컬럼명을 VARCHAR(45) 자료형을 사용하여 생성하고 빈값이 들어가도 상관없다.
PRIMARY KEY(고유 식별 컬럼, 값?)으로 idx를 설정한다.

자료형 
- BOOLEAN : 참거짓, 1BYTE
- TINYINT : 1BYTE의 정수 << -128 ~ 127   0~255
- INT : 4BYTE의 정수 << -21,147,483,648 ~ 2,147,483,647
 - BIGINT : 8 BYTE 
 - FLOAT : 4 BYTE의 실수(Real Number)
 -계산할 때 확률적으로 오류가 뜬다.
 - DOUBLE : 8 BYTE의 실수(Real Number) 
 -FLOAT보다 오류가 더 적게 뜬다.
INSERT INTO `testing`.`new_table` (`idx`, `name`, `pw`, `id`, `create_at`) 
VALUES ('1', 'sad', 'sda', 'asdabc', '2022-10-27');

- BIT(n) : n BIT의 정수 << 몇개든지 내가 설정한다.
 - BIT(4) => 0 ~ 15

 자료형(문자)
 - CHAR(n) : n BYTE의 문자, 최대 2^8 BYTE까지만 가능하다. 
 - VARCHAR(n) : 최대 n BYTE의 가변 문자, 최대 2^8 BYTE까지만 가능
  - ASCII => 1 BYTE (8 BIT) << 2^8 글자까지 최대 몇글자? 2^8 < 0 ~ 126 < 2^7 -1 < 7 BIT 앞에 1BIT를 버리고 총8 BIT
  - UTF8 => 1~3BYTE << 제일 작은 최대 글자수는 2^8 /3
  - UTF8mb4 => 1~4BYTE 
 - UTF16 => 3 BYTE
  - TEXT : 최대 2^16 BYTE의 가변 문자
  - LONGTEXT : 최대 2^32 BYTE의 가변 문자 

자료형(시간)
- DATE : 3 BYTE의 날짜 => YYYY-MM-DD
- DATETIME : 8 BYTE의 날짜와 시간 =>  YYYY-MM-DD HH:MM:SS
- TIMESTAMP : 4 BYTE의 UTC 시간의 날짜와 시간 => YYYY-MM-DD HH:MM:SS
- YEAR : 1 BYTE 연도 => YYYY

옵션
- NOT NULL : 비면 안된다.
- UNIQUE : 값이 중복되면 안된다.
- PRIMARY KEY : 고유 식별 키
- FOREIGN KEY : 테이블 연결 시 사용
- CHECK : 저장할 데이터의 범위나 조건을 지정한다.
- DEFAULT : 기본값
- AUTO_INCREMENT : index 값 자동 증가
- COMMENT : 설명


SELECT * FROM testing.new_table1;
SELECT : 데이터를 가져온다.
* : 전부
FROM : 어디서 가져올지 


SELECT * FROM testing.new_table1 WHERE name='어쩌구' ;
SELECT * FROM testing.new_table1 WHERE 조건 ;

SELECT * FROM testing.new_table1 WHERE name LIKE '어쩌구' ;
name에 "어쩌구"가 포함되어있으면 

SELECT name, id FROM testing.new_table1 WHERE name LIKE '어쩌구';
name에 "어쩌구"가 포함되어있으면 name을 가져온다.

SELECT * FROM testing.new_table1 ORDER BY name DESC;
name을 기준으로 내림차순으로 가져온다. (ASC : 오름차순)

SELECT COUNT FROM testing.new_table1;
개수 가져오기

INSERT INTO `testing`.`new_table` (`idx`, `name`, `pw`, `id`, `create_at`) 
VALUES ('0', 'sad', 'sda', 'asdabc', '2022-10-27')

INSERT 
- 데이터를 저장한다.
INTO : 어디에?
- ("idx") : 컬럼명
- VALUES : 어떤 값들인지

INSERT INTO `testing`.`testingnew_table` SET `idx` = `1`, `name` = 'naestbesabr' , `password` ='asrb'
,`id` = 'esarcv' , `create_at = '2022-02-10'
-`` << 객체(컬럼명)
- '' < 고유값 (스트링이나 숫자 등등 데이터)


SELECT testing.new_table.idx, testing.new_table.name,testing.new_table2.abc
from testing.new_table
LEFT JOIN testing.new_table2
on testing.new_table.idx = testing.new_table2.idx 
Where new_table2.idx IS NULL
ORDER BY testing.new_table.idx ASC;

